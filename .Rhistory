getwd()
setwd("./Breaches")
getwd()
require(ggplot2)
## tried to automate a download of the google docs spreadsheet from this link
##download.file("http://docs.google.com/spreadsheet/ccc?key=0AmenB57kGPGKdHh6eGpTR2lPQl9NZmo3RlVzQ1N2Ymc&single=true&gid=2&range=A1%3AW400#gid=2", "test.csv")
##but was unable to get R to get it.
##That would be a good addition to the program.
## Get the data
Breaches <- read.csv("Balloon Race- Data Breaches - Public Data - Visualisation Data.csv", header=TRUE)
```
The data was generally in pretty good shape, but I did need to take some steps to clean it up for analysis in R.
Steps to clean the data include:
* Retaining only spreadsheet columns 1-10 to include only data I need.
## delete trailing columns
Breaches<-Breaches[,1:10]
##get rid of second desrciptive row
testt<-as.vector(Breaches[1,] )
##function applying as.character to a list
tc<-function(x) as.character(x)
testt<-lapply(testt, tc)
##apply colnames
testt<-tolower(testt)
testt<-gsub(" ", "", testt)
colnames(Breaches)<-testt
Breaches<-Breaches[c(-1, -2),]
##get rid of commas in some numerical recorgs
tempo <- sub("[,]", "", as.character(Breaches$noofrecordsstolen))
#Breaches$NO.OF.RECORDS.STOLEN <- sub("[,]", "", as.character(Breaches$NO.OF.RECORDS.STOLEN))
#Make the year numeric
##then convert
Breaches$year<-as.integer(as.numeric(as.character(Breaches$year))+2004)
##Make Breaches numeric
Breaches$noofrecordsstolen<-as.integer(as.character(Breaches$noofrecordsstolen))
##clean up sensitivity
## This is a little subjective. The legend ranges from 1 to 5, but the data goes to 5000 and sometimes contains multiple impacts
## I have just taken the first character of each line. This will tend to underestimate
##Turn sensitivity into character
Breaches$datasensitivity<-as.character(Breaches$datasensitivity)
##create function to select first character
first.char <- function(x){
substring(x, 1, 1)
}
##apply the function
Breaches$datasensitivity <- lapply(Breaches$datasensitivity, first.char)
##turn back into numeric
Breaches$datasensitivity<-as.numeric(Breaches$datasensitivity)
```
Here is a random subset of the cleaned data.
##can set random seed and create a consistent list of elements if desired
set.seed(11235)
##create elements list
relem <- sample(1:dim(Breaches)[1],8,replace=FALSE)
relem <- c(1:2, relem)
##create the table to print
example<-xtable(Breaches[sort(relem),c(1,4,7,9,10)])
require(xtable)
example<-xtable(Breaches[sort(relem),c(1,4,7,9,10)])
##print as html
print(example, type="html", size="small")
AggBreaches <- aggregate(Breaches$noofrecordsstolen, list(Year = Breaches$year), sum, na.rm=TRUE)
colnames(AggBreaches) <-c("Year", "Records_Stolen")
par(mar=c(6,5,5,3))
p1<-ggplot(AggBreaches, aes(x=Year, y=Records_Stolen)) +
geom_point(shape=2, col=2) +
geom_smooth(method=lm)+
ggtitle("Total Records Stolen") +
theme(text = element_text(size=14))
print(p1)
```{r "Hacks", echo=FALSE}
#Create Hacks File
Hacks<-Breaches[grep("hacked", Breaches$methodofleak),]
##aggregate hacks data as a sum
AggHacks <- aggregate(Hacks$noofrecordsstolen, list(Year = Hacks$year), sum, na.rm=TRUE)
colnames(AggHacks) <-c("Year", "Records_Stolen")
p2<-ggplot(AggHacks, aes(x=Year, y=Records_Stolen)) +
geom_point(shape=3, col=1) +
geom_smooth(method=lm)+
ggtitle("Total Records Hacked") +
theme(text = element_text(size=14))
print(p2)
```
```{r "slopes", echo=FALSE}
Breachlm <- lm(Records_Stolen~Year, data = AggBreaches)
Hacklm <- lm(Records_Stolen~Year, data = AggHacks)
#summary(BreachSenslm)
BreachPerYear<-as.integer(Breachlm$coefficient[2]/1000)
HackPerYear<-as.integer(Hacklm$coefficient[2]/1000)
HBratio = as.integer(100.*(1.-BreachPerYear/HackPerYear))
```
```
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
```
#Create Hacks File
Hacks<-Breaches[grep("hacked", Breaches$methodofleak),]
##aggregate hacks data as a mean
AggHackSens <- aggregate(Hacks$datasensitivity, list(Year = Hacks$year), mean, na.rm=TRUE)
colnames(AggHackSens) <-c("Year", "Data_Sensitivity")
p1<-ggplot(AggHackSens, aes(x=Year, y=Data_Sensitivity)) +
geom_point(shape=3, col=1) +
geom_smooth(method=lm)+
ggtitle("Mean Sensitivity from Hacks") +
theme(text = element_text(size=14))
##aggregate Breaches data as a mean
AggBreachSens <- aggregate(Breaches$datasensitivity, list(Year = Breaches$year), mean, na.rm=TRUE)
colnames(AggBreachSens) <-c("Year", "Data_Sensitivity")
p2<-ggplot(AggBreachSens, aes(x=Year, y=Data_Sensitivity)) +
geom_point(shape=2, col=2) +
geom_smooth(method=lm)+
ggtitle("Mean Sensitivity from All Breaches") +
theme(text = element_text(size=14))
multiplot(p1, p2, cols=2)
BreachSenslm <- lm(Data_Sensitivity~Year, data = AggBreachSens)
HackSenslm <- lm(Data_Sensitivity~Year, data = AggHackSens)
#summary(BreachSenslm)
BreachSensPerYear<-as.integer(BreachSenslm$coefficient[2]/1000)
HackSensPerYear<-as.integer(HackSenslm$coefficient[2]/1000)
HBSenRatio <- as.integer(100(1-BreachSensPerYear/HackSensPerYear))
The number of hacking-induced data record losses has increased about `r HBratio` % per year, while the sensitivity of records lost from breaches overall whereas the Breach Sensitivity (obviously an arbitrary - _but nevertheless useful_ - scale) is increasing `r HBSensRatio`% faster than the sensitivity of Hacks.
setwd("~/Documents/Storm_Data_Analysis")
##get ggplot package
require(ggplot2)
require(xtable)
## well, this actually works!
## read csv file
Storms <- read.csv("repdata-data-StormData.csv.bz2", header=TRUE)
a<-str(Storms)
print(a)
#Here is a random subset of the cleaned data.
##Print a few random lines and select columns of data
##can set random seed and create a consistent list of elements if desired
#set.seed(11235)
##create elements list
relem <- sample(1:dim(Storm2)[1],6,replace=FALSE)
relem <- c(1:2, relem)
##create the table to print
example<-xtable(Storm2[sort(relem),])
##print as html
print(example, type="html", size="small")
Fatalities <- aggregate(Storm2$FATALITIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Fatalities")
# Define a convenience function to sort and reduce the data sets
sortandreduce <-function(x) {
x[with(x, order(-x[,2])),]
x[1:15,]
}
Fatalities<-sortandreduce(Fatalities)
FatPlot<-ggplot(Fatalities, aes(x="Event Type", y="Mean Fatalities")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Fatalities") +
theme(text = element_text(size=14))
Injuries <- aggregate(Storm2$INJURIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Injuries")
Injuries<-sortandreduce(Injuries)
InjPlot<-ggplot(Injuries, aes(x="Event Type", y="Mean Injuries")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Injuries") +
theme(text = element_text(size=14))
PropertyDamage <- aggregate(Storm2$PROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Property Damage ($M)")
ProperyDamage<-sortandreduce(PropertyDamage)
CropDamage <- aggregate(Storm2$CROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Crop Dmamage ($M)")
CropDamage <-sortandreduce(CropDamage)
#reduce number of columns
Storm2 <- Storms[,c(2,7,8,23,24,25,27)]
##keep only complete cases
Storm2 <-Storm2[complete.cases(Storm2),]
str(Storm2)
Fatalities <- aggregate(Storm2$FATALITIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Fatalities")
# Define a convenience function to sort and reduce the data sets
sortandreduce <-function(x) {
x[with(x, order(-x[,2])),]
x[1:15,]
}
Fatalities<-sortandreduce(Fatalities)
FatPlot<-ggplot(Fatalities, aes(x="Event Type", y="Mean Fatalities")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Fatalities") +
theme(text = element_text(size=14))
Injuries <- aggregate(Storm2$INJURIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Injuries")
Injuries<-sortandreduce(Injuries)
InjPlot<-ggplot(Injuries, aes(x="Event Type", y="Mean Injuries")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Injuries") +
theme(text = element_text(size=14))
PropertyDamage <- aggregate(Storm2$PROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Property Damage ($M)")
ProperyDamage<-sortandreduce(PropertyDamage)
CropDamage <- aggregate(Storm2$CROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Crop Dmamage ($M)")
CropDamage <-sortandreduce(CropDamage)
Fatalities <- aggregate(Storm2$FATALITIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Fatalities")
# Define a convenience function to sort and reduce the data sets
sortandreduce <-function(x) {
x[with(x, order(-x[,2])),]
x[1:15,]
}
Fatalities<-sortandreduce(Fatalities)
FatPlot<-ggplot(Fatalities, aes(x="Event Type", y="Mean Fatalities")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Fatalities") +
theme(text = element_text(size=14))
Injuries <- aggregate(Storm2$INJURIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Injuries)<-c("Event Type", "Mean Injuries")
Injuries<-sortandreduce(Injuries)
InjPlot<-ggplot(Injuries, aes(x="Event Type", y="Mean Injuries")) +
geom_histogram(fill=NA, color="red")
ggtitle("Mean Injuries") +
theme(text = element_text(size=14))
PropertyDamage <- aggregate(Storm2$PROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(PropertyDamage)<-c("Event Type", "Mean Property Damage ($M)")
PropertyDamage<-sortandreduce(PropertyDamage)
CropDamage <- aggregate(Storm2$CROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(CropDamage)<-c("Event Type", "Mean Crop Dmamage ($M)")
CropDamage <-sortandreduce(CropDamage)
## I lifted this from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(FatPlot, InjPlot, cols=2)
Fatalities <- aggregate(Storm2$FATALITIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Fatalities)<-c("Event Type", "Mean Fatalities")
# Define a convenience function to sort and reduce the data sets
sortandreduce <-function(x) {
x[with(x, order(-x[,2])),]
x[1:15,]
}
Fatalities<-sortandreduce(Fatalities)
FatPlot<-ggplot(Fatalities, aes(x="Event Type", y="Mean Fatalities")) +
geom_bar(color="red") +
ggtitle("Mean Fatalities") +
theme(text = element_text(size=14))
Injuries <- aggregate(Storm2$INJURIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(Injuries)<-c("Event Type", "Mean Injuries")
Injuries<-sortandreduce(Injuries)
InjPlot<-ggplot(Injuries, aes(x="Event Type", y="Mean Injuries")) +
geom_bar(color="blue") +
ggtitle("Mean Injuries") +
theme(text = element_text(size=14))
PropertyDamage <- aggregate(Storm2$PROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(PropertyDamage)<-c("Event Type", "Mean Property Damage ($M)")
PropertyDamage<-sortandreduce(PropertyDamage)
CropDamage <- aggregate(Storm2$CROPDMG, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
colnames(CropDamage)<-c("Event Type", "Mean Crop Dmamage ($M)")
CropDamage <-sortandreduce(CropDamage)
multiplot(FatPlot, InjPlot, cols=2)
ggplot(Injuries, aes(x=Event Type, y=Mean Injuries))
ggplot(Injuries)
ggplot(Injuries, ars(x = Event Type, y = Mean Injuries))
ggplot(Injuries, ars(x = "Event Type", y = "Mean Injuries"))
Injuries
Fatalities
Fatalities <- aggregate(Storm2$FATALITIES, by = list(Storm2$EVTYPE), mean, na.rm=TRUE)
str(Fatalities)
colnames(Fatalities)<-c("Event Type", "Mean Fatalities")
str(Fatalities)
colnames(Fatalities)<-c("Event_Type", "Mean_Fatalities")
str(Fatalities)
sortandreduce(Fatalities)
Fatalities[1:15,]
aa<-Fatalities[with(Fatalities, order(-Fatalities[,2])),]
aa[1:15,]
sortandreduce <-function(x) {
x<-x[with(x, order(-x[,2])),]
x[1:15,]
}
sortandreduce(Fatalities)
FatPlot<-ggplot(Fatalities, aes(x="Event_Type", y="Mean_Fatalities"))
print(FatPlot)
FatPlot+geom_bar()
FatPlot<-ggplot(Fatalities, aes(x=Event_Type, y=Mean_Fatalities))
FatPlot+geom_bar()
plot(FatPlot)
FatPlot
plot(Fatalities)
Fatalities
Fatalities<-sortandreduce(Fatalities)
plot(Fatalities)
Fatalities
Fatalities$Event_Type <- as.character(Fatalities$Event_Type)
plot(Fatalities)
Fatalities
?plot
Plot(Fatalities[,1]), Fatalities[,2])
Plot(Fatalities[,1], Fatalities[,2])
plot(Fatalities[,1], Fatalities[,2])
qplot(Fatalities[,1], Fatalities[,2])
qplot(Fatalities)
##get ggplot package
require(ggplot2)
require(xtable)
## well, this actually works!
## read csv file
Storms <- read.csv("repdata-data-StormData.csv.bz2", header=TRUE)
a<-str(Storms)
print(a)
#reduce number of columns
Storm2 <- Storms[,c(2,7,8,23,24,25,27)]
##keep only complete cases
Storm2 <-Storm2[complete.cases(Storm2),]
str(Storm2)
Thunderstorms <- Storm2[grepl("TSTM", Storm2$EVTYPE), ]
str(Thunderstorms)
head(Thunderstorms)
Tornado <- Storm2[grepl("TORN", Storm2$EVTYPE, ignore.case=TRUE), ]
head(Tornado)
thunderstorms <- Storm2[grepl("TSTM", Storm2$EVTYPE), ]
tornado <- Storm2[grepl("TORN", Storm2$EVTYPE, ignore.case=TRUE), ]
wind <- Storm2[grepl("wind", Storm2$EVTYPE, ignore.case=TRUE), ]
rain<- Storm2[grepl("rain", Storm2$EVTYPE, ignore.case=TRUE), ]
flood <- Storm2[grepl(c("flood","fld"), Storm2$EVTYPE, ignore.case=TRUE), ]
warm <- Storm2[grepl(c("warm", "hot"), Storm2$EVTYPE, ignore.case=TRUE), ]
wind <- Storm2[grepl(c("wind", "wnd"), Storm2$EVTYPE, ignore.case=TRUE), ]
cold <- Storm2[grepl(c("cold", "cool", ), Storm2$EVTYPE, ignore.case=TRUE), ]
landslide <- Storm2[grepl(c("landsl", "mud"), Storm2$EVTYPE, ignore.case=TRUE), ]
tropicalstorm <- Storm2[grepl("tropic", Storm2$EVTYPE, ignore.case=TRUE), ]
urban <- Storm2[grepl("urban", Storm2$EVTYPE, ignore.case=TRUE), ]
snow <- Storm2[grepl(c("snow", "ice", "icy"), Storm2$EVTYPE, ignore.case=TRUE), ]
extreme <- Storm2[grepl("record", Storm2$EVTYPE, ignore.case=TRUE), ]
lightning <- Storm2[grepl("lightn", Storm2$EVTYPE, ignore.case=TRUE), ]
flood <- Storm2[grepl("flood"|"fld", Storm2$EVTYPE, ignore.case=TRUE), ]
flood <- Storm2[grepl("flood", Storm2$EVTYPE, ignore.case=TRUE), ]
dim(flood)
flood <- rbind(flood, Storm2[grepl("fld", Storm2$EVTYPE, ignore.case=TRUE), ])
dim(flood)
thunderstorms <- Storm2[grepl("TSTM", Storm2$EVTYPE), ]
thunderstorms <- cbind (rep("thunderstorms", dim(thunderstorms[1])), thunderstorms)
?rep
rep("A", 4)
dim(thunderstorms[1]
)
dim(thunderstorms)
dim(thunderstorms)[1]
thunderstorms <- cbind (rep("thunderstorms", dim(thunderstorms)[1]), thunderstorms)
head(thunderstorms)
disaster_x <- function(name_string, search_string) {
temp <- Storm2[grepl(search_string, Storm2$EVTYPE, ignore.case=TRUE), ]
temp<- cbind (rep(name_string, dim(temp)[1]), temp)
rbind(temp, disasters)
}
disasters<-NULL
disaster_x <- function(name_string, search_string, disasters) {
temp <- Storm2[grepl(search_string, Storm2$EVTYPE, ignore.case=TRUE), ]
temp<- cbind (rep(name_string, dim(temp)[1]), temp)
rbind(temp, disasters)
}
disasters<-disasters_x("heat", "warm", disasters)
disasters<-disaster_x("heat", "warm", disasters)
head(disasters)
disasters<-NULL
disaster_x <- function(name_string, search_string, output=disasters, input=Storm2) {
temp <- input[grepl(search_string, input$EVTYPE, ignore.case=TRUE), ]
temp<- cbind (rep(name_string, dim(temp)[1]), temp)
rbind(temp, output)
}
disasters<-disaster_x("thunderstorm", "TSTM")
head(disasters)
